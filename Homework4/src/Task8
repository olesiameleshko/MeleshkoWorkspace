In Java, the order for initialization statements is as follows:
1. static variables and static initializers in order.
2. instance variables and instance initializers in order.
3. constructors.

Initialization order of fields (instance and static) in Java when JVM loads a class.
Ordering rules:
1. Static fields and static blocks of ancestors.
In each class they are initialized in order of appearance.
2. Static fields and static block of instantiated class.
3. Instance fields and initialization blocks of ancestors.
In each class they are initialized in order of appearance.
4. Constructor of ancestor after initialization of its instance fields.
5. Instance fields and initialization blocks of the current class.
Also in order of appearance.
6. Constructor of the current class.

A class can have any number of static initialization blocks, and they can appear anywhere in the class body.
The runtime system guarantees that static initialization blocks are called in the order that they appear in the source code.

Order of execution of constructors in inheritance relationship is from base /parent class to derived / child class.
We know that when we create an object of a class then the constructors get called automatically.